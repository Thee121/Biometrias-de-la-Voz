%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SEPARADOR POR FILTRADO INVERSO
% FUNCIONA EN BLOQUES
% Nombre del fichero de entrada: n_fichero
% Polo del filtro de preenfasis: polo
% Longitud de la ventana: l_v
% Numero de coeficientes del modelo LPC: n_coef
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

close all;
clear;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Variables de entrada para poder modificar parámetros del sistema
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% VAD (Detección de Actividad de Voz)
vad_threshold =  0.001;

% Parámetro de sonoridad
zcr_threshold = 0.5;

% Nombre del fichero a modificar
prompt = 'Introducir nombre del fichero de audio: ';
n_fichero = input(prompt, "s"); %Por ejemplo, AEIOU.wav

% Parámetros de cambio de tiempo
prompt = 'Introducir parámetro de cambio de tiempo: ';
tempo_factor = input(prompt); %Por ejemplo, 1.5

[x, fs] = audioread(n_fichero);
x_tempo_changed = change_tempo(x, fs, tempo_factor);

l_v = 512;                                  % Longitud de la ventana
desplaza = l_v / 2;                          % Desplazamiento
n_trozos = floor(length(x) / desplaza) - 1;  % Trozos sobre los que evaluar la LPC
n_coef = 14;                                 % Número de coeficientes LPC
n_formantes = min(5, n_coef / 2 - 1);
trama = floor(n_trozos / 2);                 % Trama individual a pintar


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Filtrado de preénfasis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

polo = 0.95;
b = [1, -polo];
a = 1;
x_fil = filter(b, a, x);
x = x_fil;

% Variables de almacenamiento
matr_lpc = zeros(l_v / 2 + 1, n_trozos);
frecs_f = zeros(n_coef / 2, n_trozos);
Zi = zeros(1, n_coef); % Condiciones iniciales de los filtros
tracto = []; % Señal de tracto vocal
recompuesto = []; % Estructura para la recomposición de voz
pulso = []; % Pulso original de la nota de voz
Zi_rec = zeros(1, n_coef); % Condiciones iniciales de los filtros para la señal recompuesta

for i = 1:n_trozos
    trozo = x((i - 1) * desplaza + 1 : (i - 1) * desplaza + l_v);
    
    % Detección de actividad de voz
    if sum(trozo.^2) / length(trozo) > vad_threshold
        % Detección de sonoridad
        zcr = sum(abs(diff(trozo > 0))) / length(trozo);
        if zcr < zcr_threshold
            % Coeficientes LPC
            a_lpc = real(lpc(trozo, n_coef));
            
            % Validación de los coeficientes LPC
            if a_lpc(1) ~= 0
                matr_a_lpc(:, i) = a_lpc;
                [H, ~] = freqz(1, a_lpc, l_v / 2 + 1, fs);
                matr_lpc(:, i) = 20 * log10(abs(H) + eps);

                % Extracción de polos
                r = roots(a_lpc);
                r = r(imag(r) > 0.01);
                frecs = sort(atan2(imag(r), real(r)) * fs / (2 * pi));
                frecs_f(1:length(frecs), i) = frecs;

                % Filtro inverso del tracto vocal
                b_inv = a_lpc;
                a_inv = 1;
                [trozo_pulso, Zi] = filter(b_inv, a_inv, trozo(1:desplaza), Zi);
                pulso = [pulso, (trozo_pulso(1:desplaza))'];

                [H_tracto, ~] = freqz(1, a_lpc, l_v, fs, 'whole');
                trozo_tracto = real(ifft(H_tracto));
                tracto = [tracto, (trozo_tracto(1:desplaza))'];
            end
        end
    end
end


% Resample the pulse signal
[p, q] = rat(tempo_factor); % Calculate the resampling factors
pulso_resampled = resample(pulso, p, q);

% Ajuste del número de trozos para la señal resampleada
n_trozos_resampled = floor(length(pulso_resampled) / desplaza) - 1;

% Recomposición de voz con las señales de pulso y tracto con entonación modificada
for i = 1:n_trozos_resampled
    if (i-1)*desplaza + l_v <= length(pulso_resampled)
        trozo = pulso_resampled((i-1)*desplaza+1 : (i-1)*desplaza+l_v);
        a_lpc = matr_a_lpc(:, i);
    
        % Validación de los coeficientes LPC
        if a_lpc(1) ~= 0
            [trozo_recompuesto, Zi_rec] = filter(1, a_lpc, trozo(1:desplaza), Zi_rec);
            recompuesto = [recompuesto, (trozo_recompuesto(1:desplaza))];
        end
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Generación de gráficos
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

figure(1);
eje_t = (0:n_trozos-1) / (fs / desplaza);
eje_lpc = (0:l_v/2) * fs / l_v;
surf(eje_t, eje_lpc, matr_lpc);
shading interp;
title('Espectro LPC');
xlabel('Tiempo (s)');
ylabel('Frecuencia (Hz)');

[B, f, t] = specgram(x, l_v, fs);


figure(2);
eje_f = (0:l_v/2) * fs / l_v;
trama_lpc = matr_lpc(:, trama);
trama_fourier = 20 * log10(abs(B(:, trama)));
trama_lpc = trama_lpc - max(trama_lpc);
trama_fourier = trama_fourier - max(trama_fourier);
a_v = 1;
b_v = [1 -1];
D_envolv = filter(b_v, a_v, trama_lpc);
D_D_envolv = filter(b_v, a_v, D_envolv);

plot(eje_lpc, trama_lpc, 'r', eje_f, trama_fourier, 'b', eje_f, D_envolv, 'k', eje_f, D_D_envolv, 'g');
title('FFT y envolvente LPC')
xlabel('Frecuencia (Hz)');
ylabel('Amplitud (dB)');
legend('LPC', 'FFT', 'D_LPC', 'DD_LPC');

figure(3);
surf(matr_lpc - 20 * log10(abs(B)));
title('Diferencia entre espectro LPC y FFT')
xlabel('Tiempo (s)');
ylabel('Frecuencia (Hz)');
shading interp;

% Integramos el pulso para obtener la onda
a = [1, -0.99];
b = 0.01;
onda_glot_reconstruida = filter(b, a, pulso_resampled);
onda_glot = filter(b, a, pulso);

figure(4);
lin = linspace(0,10,50);
y1 = sin(x);
y2 = rand(50,1);
tiledlayout(2,1)

eje = 1:length(onda_glot_reconstruida);
eje2 = 0:1/fs:(length(pulso)-1)/fs;
plot(eje, pulso_resampled, 'b', eje, onda_glot_reconstruida*100, 'r');
title('Pulso y Onda Reconstruida');
xlabel('Tiempo (s)');
ylabel('Amplitud');
legend('Pulso', 'Onda');
plot(eje2, pulso, 'b', eje2, onda_glot*100, 'r');
title('Pulso y Onda Resampled');
xlabel('Tiempo (s)');
ylabel('Amplitud');
legend('Pulso', 'Onda');

pulso_resampled = pulso_resampled / max(abs(pulso_resampled));
onda_glot_reconstruida = onda_glot_reconstruida / max(abs(onda_glot_reconstruida));

figure(5);
spectrogram(x, 512, 256, 512, fs, 'yaxis');
title('Voz Original');

figure(6);
spectrogram(recompuesto, 512, 256, 512, fs, 'yaxis');
title('Voz Recompuesta');


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Guardar los audios modificados
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

tracto = tracto / max(abs(tracto));
newStr = erase(n_fichero , '.wav'); % Borra el sufijo del number
audiowrite([n_fichero, '_tempo_changed.wav'], x_tempo_changed, fs);
audiowrite([n_fichero, '_pulso.wav'], pulso_resampled, fs);
audiowrite([n_fichero, '_onda.wav'], onda_glot, fs);
audiowrite([n_fichero, '_tracto.wav'], tracto, fs);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Funciones auxiliares
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function y = change_tempo(x, ~, tempo_factor)
    % Cambia la velocidad de la señal x por el factor tempo_factor
    % tempo_factor > 1: acelera la señal
    % tempo_factor < 1: desacelera la señal
    
    % Resample la señal para cambiar la velocidad
    [p, q] = rat(tempo_factor);
    y = resample(x, p, q);
end